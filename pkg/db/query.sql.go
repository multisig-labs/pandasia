// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createMerkleProof = `-- name: CreateMerkleProof :exec
INSERT INTO merkle_proofs (
	merkle_root_id, paddy, data, proof
) VALUES (
 ?, ?, ?, ?
)
`

type CreateMerkleProofParams struct {
	MerkleRootID int64
	Paddy        string
	Data         string
	Proof        string
}

func (q *Queries) CreateMerkleProof(ctx context.Context, arg CreateMerkleProofParams) error {
	_, err := q.db.ExecContext(ctx, createMerkleProof,
		arg.MerkleRootID,
		arg.Paddy,
		arg.Data,
		arg.Proof,
	)
	return err
}

const createMerkleRootAndReturnId = `-- name: CreateMerkleRootAndReturnId :one
INSERT INTO merkle_roots (
	height, type, root
) VALUES (
 ?, ?, ?
) RETURNING id
`

type CreateMerkleRootAndReturnIdParams struct {
	Height int64
	Type   string
	Root   string
}

func (q *Queries) CreateMerkleRootAndReturnId(ctx context.Context, arg CreateMerkleRootAndReturnIdParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createMerkleRootAndReturnId, arg.Height, arg.Type, arg.Root)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createTx = `-- name: CreateTx :exec
INSERT OR IGNORE INTO txs (
  id, height, block_id, type_id, unsigned_tx, signer_addr_p
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreateTxParams struct {
	ID          string
	Height      int64
	BlockID     string
	TypeID      int64
	UnsignedTx  string
	SignerAddrP string
}

func (q *Queries) CreateTx(ctx context.Context, arg CreateTxParams) error {
	_, err := q.db.ExecContext(ctx, createTx,
		arg.ID,
		arg.Height,
		arg.BlockID,
		arg.TypeID,
		arg.UnsignedTx,
		arg.SignerAddrP,
	)
	return err
}

const findAddrsForMerkleTree = `-- name: FindAddrsForMerkleTree :many
SELECT DISTINCT rewards_addr
FROM txs
WHERE has_earned_reward = 1
AND type_id = ?
AND height <= ?
ORDER BY rewards_addr
`

type FindAddrsForMerkleTreeParams struct {
	TypeID int64
	Height int64
}

func (q *Queries) FindAddrsForMerkleTree(ctx context.Context, arg FindAddrsForMerkleTreeParams) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, findAddrsForMerkleTree, arg.TypeID, arg.Height)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var rewards_addr sql.NullString
		if err := rows.Scan(&rewards_addr); err != nil {
			return nil, err
		}
		items = append(items, rewards_addr)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAsRewarded = `-- name: MarkAsRewarded :exec
UPDATE txs
SET has_earned_reward = 1
WHERE id = ?
`

func (q *Queries) MarkAsRewarded(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, markAsRewarded, id)
	return err
}

const maxHeight = `-- name: MaxHeight :one
SELECT cast(COALESCE(max(height),0) as integer) as maxheight from txs
`

func (q *Queries) MaxHeight(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, maxHeight)
	var maxheight int64
	err := row.Scan(&maxheight)
	return maxheight, err
}
